/*
    ChmodPro - Mac OSX widget that determines UNIX/Linux permissions in various formats and displays chmod syntax suggestions.
    Copyright (C) 2010  Steve Dickinson  dsdickinson@mac.com

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program (see COPYING file).  If not, see <http://www.gnu.org/licenses/>.
*/

var curr_front = 1;
var curr_back = 0;

// This file was generated by Dashcode from Apple Inc.
// You may edit this file to customize your Dashboard widget.

//
// Function: load()
// Called by HTML body element's onload event when the widget is ready to start
//
function load()
{
    setupParts();
	init();
	runChmod();
}

//
// Function: remove()
// Called when the widget has been removed from the Dashboard
//
function remove()
{
    // Stop any timers to prevent CPU usage
    // Remove any preferences as needed
    // widget.setPreferenceForKey(null, createInstancePreferenceKey("your-key"));
}

//
// Function: hide()
// Called when the widget has been hidden
//
function hide()
{
    // Stop any timers to prevent CPU usage
}

//
// Function: show()
// Called when the widget has been shown
//
function show()
{
    // Restart any timers that were stopped on hide
}

//
// Function: sync()
// Called when the widget has been synchronized with .Mac
//
function sync()
{
    // Retrieve any preference values that you need to be synchronized here
    // Use this for an instance key's value:
    // instancePreferenceValue = widget.preferenceForKey(null, createInstancePreferenceKey("your-key"));
    //
    // Or this for global key's value:
    // globalPreferenceValue = widget.preferenceForKey(null, "your-key");
}

//
// Function: showBack(event)
// Called when the info button is clicked to show the back of the widget
//
// event: onClick event from the info button
//
function showBack(event)
{
    curr_front = 0;
	curr_back = 1;
	
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) {
        widget.prepareForTransition("ToBack");
    }

    front.style.display = "none";
    back.style.display = "block";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

//
// Function: showFront(event)
// Called when the done button is clicked from the back of the widget
//
// event: onClick event from the done button
//
function showFront(event)
{
    curr_front = 1;
	curr_back = 0;
	
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) {
        widget.prepareForTransition("ToFront");
    }

    front.style.display="block";
    back.style.display="none";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

if (window.widget) {
    widget.onremove = remove;
    widget.onhide = hide;
    widget.onshow = show;
    widget.onsync = sync;
}

function get_command(octal, operator) {
	var owner_bits		= "";
	var groups_bits		= "";
	var other_bits		= "";
	var command_text	= "";
	
	owner_bits = octal.substr(0,1);
	group_bits = octal.substr(1,1);
	other_bits = octal.substr(2,1);		
	
	if (operator == "+") {
		if (owner_bits > 0) {
			chmod_groups += "u";
		}
		if (group_bits > 0) {
			chmod_groups += "g";
		}
		if (other_bits > 0) {
			chmod_groups += "o";
		}				
	}
	
	if (operator == "-") {
	
	}
	
	if (operator == "=") {
	
	}		
	
	if (save_owner == 1) {
		chmod_groups += "u"
	}		
	if (save_group == 1) {
		chmod_groups += "g"
	}	
	if (save_other == 1) {
		chmod_groups += "o"
	}	
	if (chmod_groups == "ugo") {
		chmod_groups = "a";							
	}		
			
	if (save_read == 1) {
		chmod_perms += "r"
	}		
	if (save_write == 1) {
		chmod_perms += "w"
	}	
	if (save_exec == 1) {
		chmod_perms += "x"
	}			
	commandText = "chmod " + chmod_groups + operator + chmod_perms;	
	
	return (commandText);
}

function runChmod() {
	var arr_sym_bits			= new Array("-", "-", "-", "-", "-", "-", "-", "-", "-", "");
	var arr_read_bits			= new Array(3);
	var arr_write_bits			= new Array(3);
	var arr_exec_bits			= new Array(3);		
	var arr_perm_bits			= [];
	var commands				= "";
	var new_command				= "";
	var merge_command			= "";
    var special_octal_value		= 0;	
    var std_octal_value			= 0;
	var octal_value				= 0;
	var suid_bit				= "";
	var sgid_bit				= "";
	var sticky_bit				= "";
	var owner_read_bit1			= "-";
	var group_read_bit2			= "-";
	var other_read_bit3			= "-";
	var owner_write_bit1		= "-";
	var group_write_bit2		= "-";
	var other_write_bit3		= "-";
	var owner_exec_bit1			= "-";
	var group_exec_bit2			= "-";
	var other_exec_bit3			= "-";		
	var total_symbolic			= "";
	var chmod_groups			= "";
	var chmod_perms				= "";	
	var chmod_operator			= "-";
	var save_read				= 0;
	var save_write				= 0;
	var save_exec				= 0;
	var save_owner				= 0;
	var save_group				= 0;
	var save_other				= 0;	
	var read_group				= "";
	var write_group				= "";
	var exec_group				= "";
		
	//------------------------------------------------------------------------	
	// Read checkboxes
	//------------------------------------------------------------------------	
	for (counter = 0; counter < document.getElementsByName("std_ckboxes").length; counter++) {
		if (document.getElementsByName("std_ckboxes").item(counter).checked) {
			switch (counter) {				
				case 0: std_octal_value += 400; arr_sym_bits[0] = "r"; arr_read_bits[0]  = "u"; save_owner = 1; save_read  = 1; break;
				case 1: std_octal_value += 40;	arr_sym_bits[3] = "r"; arr_read_bits[1]  = "g";	save_group = 1; save_read  = 1; break;
				case 2: std_octal_value += 4;	arr_sym_bits[6]	= "r"; arr_read_bits[2]  = "o";	save_other = 1; save_read  = 1; break;
				case 3: std_octal_value += 200; arr_sym_bits[1] = "w"; arr_write_bits[0] = "u"; save_owner = 1; save_write = 1; break;
				case 4: std_octal_value += 20;	arr_sym_bits[4] = "w"; arr_write_bits[1] = "g"; save_group = 1; save_write = 1; break;
				case 5: std_octal_value += 2;	arr_sym_bits[7] = "w"; arr_write_bits[2] = "o"; save_other = 1; save_write = 1; break;	
				case 6: std_octal_value += 100; arr_sym_bits[2] = "x"; arr_exec_bits[0]  = "u";	save_owner = 1; save_exec  = 1; break;
				case 7: std_octal_value += 10;	arr_sym_bits[5] = "x"; arr_exec_bits[1]  = "g";	save_group = 1; save_exec  = 1; break;
				case 8: std_octal_value += 1;	arr_sym_bits[8] = "x"; arr_exec_bits[2]  = "o";	save_other = 1; save_exec  = 1; break;				
				default: alert("Unknown value!");
			}										
		}
	}
	
	for (counter = 0; counter < document.getElementsByName("special_ckboxes").length; counter++) {
		if (document.getElementsByName("special_ckboxes").item(counter).checked) {
			switch (counter) {
				case 0: special_octal_value += 4; if (arr_sym_bits[2] == "x") {arr_sym_bits[2] = "S";} else {arr_sym_bits[2] = "s";}  break;
				case 1: special_octal_value += 2; if (arr_sym_bits[5] == "x") {arr_sym_bits[5] = "S";} else {arr_sym_bits[5] = "s";} break;
				case 2: special_octal_value += 1; if (arr_sym_bits[8] == "x") {arr_sym_bits[8] = "T";} else {arr_sym_bits[8] = "t";} break;				
				default: alert("Unknown value!");
			}			
		}
	}	
		
	//------------------------------------------------------------------------	
	// Display octal permissions
	//------------------------------------------------------------------------		
	if (std_octal_value < 10) {
		std_octal_value = "00" + std_octal_value;
	} else if (std_octal_value < 100) {
		std_octal_value = "0" + std_octal_value;
	} 
	octal_value = String(special_octal_value) + String(std_octal_value);
	document.getElementById("octal").value = octal_value;	
	
	//------------------------------------------------------------------------	
	// Display symbolic permissions
	//------------------------------------------------------------------------	
	total_symbolic = arr_sym_bits.join("");					 
	document.getElementById("symbolic").value = total_symbolic;	

	//------------------------------------------------------------------------	
	// Display syntax suggestions
	//------------------------------------------------------------------------	
	/*	
	for (var i=0; i < arr_sym_bits.length; i++) {
		if (arr_sym_bits[i] == "r") {
			if (i == 0) {
				arr_read_bits[0] = "u";
			}
			if (i == 3) {
				arr_read_bits[1] = "g";
			}
			if (i == 6) {
				arr_read_bits[2] = "o";
			}						
		}
		if (arr_sym_bits[i] == "w") {
			if (i == 1) {
				arr_write_bits[0] = "u";
			}
			if (i == 4) {
				arr_write_bits[1] = "g";
			}
			if (i == 7) {
				arr_write_bits[2] = "o";
			}						
		}
		if (arr_sym_bits[i] == "x") {
			if (i == 2) {
				arr_exec_bits[0] = "u";
			}
			if (i == 5) {
				arr_exec_bits[1] = "g";
			}
			if (i == 8) {
				arr_exec_bits[2] = "o";
			}						
		}				
	}
	*/
	read_group = arr_read_bits.join("");
	write_group = arr_write_bits.join("");	
	exec_group = arr_exec_bits.join("");	
	
	commands  = "chmod " + octal_value + " ...\n";
	new_command += " ";
	
	if (std_octal_value != "000") {
		if (read_group != "") {
			new_command += read_group + "=" + "r";
		}
		if (write_group != "") {	
			if (read_group != "") {	
				new_command += ", ";
			}
			new_command += write_group + "=" + "w";			
		}
		if (exec_group != "") {	
			if (read_group != "" || write_group != "") {	
				new_command += ", ";
			}				
			new_command += exec_group + "=" + "x";		
		}
				
		commands += "chmod " + new_command + " ...\n";
		
		/*
		merge_command = new_command;
		alert(merge_command);
		
		merge_command = merge_command.replace(/ u=r, u=w, u=x/g, " u=rwx");		
		merge_command = merge_command.replace(/ u=r, u=w/g, " u=rw");
		merge_command = merge_command.replace(/ u=r, u=x/g, " u=rx");			
		merge_command = merge_command.replace(/ u=w, u=x/g, " u=wx");
		merge_command = merge_command.replace(/ g=r, g=w, g=x/g, " g=rwx");			
		merge_command = merge_command.replace(/ g=r, g=w/g, " g=rw");
		merge_command = merge_command.replace(/ g=r, g=x/g, " g=rx");			
		merge_command = merge_command.replace(/ g=w, g=x/g, " g=wx");	
		merge_command = merge_command.replace(/ o=r, o=w, o=x/g, " o=rwx");				
		merge_command = merge_command.replace(/ o=r, o=w/g, " o=rw");
		merge_command = merge_command.replace(/ o=r, o=x/g, " o=rx");			
		merge_command = merge_command.replace(/ o=w, o=x/g, " o=wx");		
		merge_command = merge_command.replace(/ ug=r, ug=w, ug=x/g, " ug=rwx");	
		merge_command = merge_command.replace(/ uo=r, uo=w, uo=x/g, " uo=rwx");			
		merge_command = merge_command.replace(/ go=r, go=w, go=x/g, " go=rwx");	
		merge_command = merge_command.replace(/ go=r, go=w, go=x/g, " go=rwx");		
		merge_command = merge_command.replace(/ ug=r, ug=w/g, " ug=rw");		
		merge_command = merge_command.replace(/ ug=w, ug=x/g, " ug=wx");		
		merge_command = merge_command.replace(/ go=r, go=w/g, " go=rw");		
		merge_command = merge_command.replace(/ go=w, go=x/g, " go=wx");	
		merge_command = merge_command.replace(/ uo=r, uo=w/g, " uo=rw");	
		merge_command = merge_command.replace(/ uo=r, uo=x/g, " uo=rx");								
		
		if (new_command != merge_command) {	
			commands += "chmod" + merge_command + " ...\n";		
		}
		*/
		
		if (read_group == "ugo" || write_group == "ugo" || exec_group == "ugo") {	
			new_command = new_command.replace(/ugo/g, "a");
			commands += "chmod" + new_command + " ...\n";
		}			
	}
	/*
	for (var i=0; i < arr_read_bits.length; i++) {
		if (arr_read_bits[i] == "u") {

		}
	}
		
	if (save_owner == 1) {
		chmod_groups += "u"
	}		
	if (save_group == 1) {
		chmod_groups += "g"
	}	
	if (save_other == 1) {
		chmod_groups += "o"
	}	
		
			
	if (save_read == 1) {
		chmod_perms += "r"
	}		
	if (save_write == 1) {
		chmod_perms += "w"
	}	
	if (save_exec == 1) {
		chmod_perms += "x"
	}		
	*/
	
	/*
	command = get_command(String(std_octal_value), '+');
	command = get_command(String(std_octal_value), '-');	
	command = get_command(String(std_octal_value), '=');	
	*/
/*
	if (save_owner == 1) {
		chmod_groups += "u"
	}		
	if (save_group == 1) {
		chmod_groups += "g"
	}	
	if (save_other == 1) {
		chmod_groups += "o"
	}	
	if (chmod_groups == "ugo") {
		chmod_groups = "a";							
	}		
			
	if (save_read == 1) {
		chmod_perms += "r"
	}		
	if (save_write == 1) {
		chmod_perms += "w"
	}	
	if (save_exec == 1) {
		chmod_perms += "x"
	}			
	*/

/*	
	commands  = "chmod " + octal_value + " ...\n";
	if (std_octal_value != "000") {
		commands += "chmod " + chmod_groups + "=" + chmod_perms + " ...\n";		
	}
	if (chmod_groups == "ugo") {
		commands += "chmod a" + "=" + chmod_perms + " ...\n";							
	}	
	*/
	
	document.getElementById("commands").value = commands;
}

function keyHandler(e)
{
     var pressedKey;  
     if (window.event) pressedKey = window.event.keyCode;  
     else if (e) pressedKey = e.which;  
     var e = e || window.event;  
	 
	 // CTRL + c
     if (pressedKey == 67 && e.ctrlKey){  
		clearChmod();
	 }
	 
	 // RETURN	 	 
 	 if (pressedKey == 13) {
	     runChmod();
	 } 	 
	 
	 // CTRL + i
     if (pressedKey == 73 && e.ctrlKey){  
	     if (curr_front == 1) {
		     showBack();	    
	     } else if (curr_back == 1) {
		     showFront();	    
	     }	 
     }  
}
document.onkeydown = keyHandler;

function init() {
	var arr_special = new Array();
	var arr_std		= new Array();
       
	arr_special = document.getElementsByName("special_ckboxes");
	for(var i = 0; i < arr_special.length; i++) {
		var obj = document.getElementsByName("special_ckboxes").item(i);
	
		if(obj.addEventListener)
			obj.addEventListener('click', runChmod, false);
		else if(obj.attachEvent)
			obj.attachEvent('onclick', runChmod);
	}
		   
	arr_std = document.getElementsByName("std_ckboxes");
	for(var i = 0; i < arr_std.length; i++) {
		var obj = document.getElementsByName("std_ckboxes").item(i);
	
		if(obj.addEventListener)
			obj.addEventListener('click', runChmod, false);
		else if(obj.attachEvent)
			obj.attachEvent('onclick', runChmod);
	}

}

function showCodeUni(event)
{
    widget.openURL("http://www.codeuniversity.com");
}

function selectCodeUni(event) 
{
	document.getElementById('mylink').style.cursor = "pointer";
}

function clearChmod(event)
{
	// CLEAR ALL ELEMENTS
	for (counter = 0; counter < document.getElementsByName("special_ckboxes").length; counter++) {
		document.getElementsByName("special_ckboxes").item(counter).checked = false
	}	

	for (counter = 0; counter < document.getElementsByName("std_ckboxes").length; counter++) {
		document.getElementsByName("std_ckboxes").item(counter).checked = false
	}
	
	document.getElementById("octal").value = "";
	document.getElementById("symbolic").value = "";	
	document.getElementById("commands").value = "";
	runChmod();
}